#!/bin/bash

function mypy {

	local dotpyfile="$(basename "$1")"
	local dirname="$(dirname "$(realpath $1)")"
	local dockerimage="python"
	local containerentrypoint="python"
	docker run --rm --interactive --tty \
                  --volume "$dirname":"$dirname" \
                  --workdir "$dirname" \
                  --entrypoint "$containerentrypoint" \
                  "$dockerimage" "$dotpyfile"

}

function docker-export-data-container {
	# Takes a name or id of a container and creates a .tar archive
	# in the current working directory, from the volumes of the container
	# USAGE:
	#   $ docker-export-data-container DATA_VOLUME_CONTAINER

	DATA_VOLUME_CONTAINER="$1" # Name or ID of the data container
	BACKUP_TARFILE_NAME=${DATA_VOLUME_CONTAINER}_$(date +'%Y%m%d').tar
	
	declare -a VOLUME_MOUNT_DESTINATIONS
	
	for dest in $(docker inspect --format='{{range $k,$v := .Config.Volumes}}
	{{println $k}}{{end}}' $DATA_VOLUME_CONTAINER 2> /dev/null); do
		VOLUME_MOUNT_DESTINATIONS[((counter++))]="$dest"
	done
	
	VOLUME_MOUNT_DESTINATIONS_STR="${VOLUME_MOUNT_DESTINATIONS[@]}"

	docker run --rm --volumes-from $DATA_VOLUME_CONTAINER \
                  --volume $(pwd):/backup alpine \
                  tar cvf /backup/${BACKUP_TARFILE_NAME} $VOLUME_MOUNT_DESTINATIONS_STR

	echo "The data volume container has been archived in: '$BACKUP_TARFILE_NAME'"
}

function docker-import-data-container {
	# USAGE:
	#   $ docker-import-data-container TARFILE [NEW_DV_CONTAINER_BASE_IMAGE [NEW_DV_COONTAINER_NAME]]

	TAR_ARCHIVE="$1"

	declare -a VOLUMES

	for path in $(tar tf $TAR_ARCHIVE | cut -d '/' -f 1 | uniq); do
		VOLUMES[((index++))]="--volume /$path"
	done

	DATA_VOLUME_CONTAINER_NAME=${3:-${TAR_ARCHIVE%_*}}

	docker run ${VOLUMES[@]} --name $DATA_VOLUME_CONTAINER_NAME ${2:-"alpine"}

	docker run --rm --volumes-from $DATA_VOLUME_CONTAINER_NAME \
                  --volume $(pwd):/restore \
                  alpine /bin/sh -c "tar xvf /restore/$TAR_ARCHIVE"

	echo "The data volume container has been imported as: '$DATA_VOLUME_CONTAINER_NAME'."
}

function quarantine {

	# A container to test things out in a quarantine
	# USAGE:
	#    $ quarantine [optional_base_image]
	#
	# Spins up a container from the base image (default ubuntu:latest)
	# ,with GUI and sound capabilites, with the current working direc-
	# tory bind-mounted (READ ONLY) inside the container.  A temporary
	# directory is also created in the current directory and bind-mou-
	# nted inside the container (WRITE-ABLE) so as to save any necess-
	# ary files from the quarantine session. If the directory is empty
	# when the container stops, it is removed.
	#
	# The quarantine container is NOT saved. `docker commit` is recom-
	# mended for that purpose.

	local image=${1:-"ubuntu"}
	local tempdir=$(mktemp -d ${FUNCNAME[@]^^}.XXXXXXX)
	cd $tempdir
	xhost +"local:docker@"
	docker run --rm --interactive --tty \
               --volume /tmp/.X11-unix:/tmp/.X11-unix \
               --env DISPLAY=$DISPLAY \
               --group-add $(getent group audio | cut -d: -f3) \
               --device /dev/snd \
               --volume "$(dirname $(pwd))":"$(dirname $(pwd))":ro \
               --volume "$(pwd)":"$(pwd)" \
               --workdir "$(dirname $(pwd))" \
               --hostname "quarantine" \
               $image
	cd -
	rmdir $tempdir

}

function spinguix {

	# Spin up a guix container
	# USAGE:
	#   $ spinguix GUIX-IMAGE DATA-CONTAINER
	#   - GUIX-IMAGE: must exist
	#   - DATA-CONTAINER: Is created if it does not exist already
	# The spinned guix container has all GUI capabilities (including sound).
	# It is removed as soon as it is stopped. The reason why it is started
	# using --privileged is because `guix build` builds things essentially inside
	# containers. And --privileged is required to spin containers inside of containers.

	local GUIX_IMAGE=$1
	local DATA_CONTAINER=$2
	local GUIX_IMAGE_EXISTS=$(docker inspect --format {{.RepoTags}} $GUIX_IMAGE 2> /dev/null)
	local DATA_CONTAINER_EXISTS=$(docker inspect --format {{.Name}} $DATA_CONTAINER 2> /dev/null)
	[ -z $GUIX_IMAGE_EXISTS ] && echo 'The specified guix image could not be found.' >&2 && return 1
	[ -z $DATA_CONTAINER_EXISTS ] && docker create --volume /gnu \
                                                   --volume /var/guix/ \
                                                   --name "$DATA_CONTAINER" "$GUIX_IMAGE"

	xhost +"local:docker@" &> /dev/null
	docker run --rm --interactive --tty \
                    --volumes-from "$DATA_CONTAINER" \
                    --volume /tmp/.X11-unix:/tmp/.X11-unix \
                    --env DISPLAY=$DISPLAY \
                    --group-add $(getent group audio | cut -d: -f3) \
                    --device /dev/snd \
                    --privileged \
                    "$GUIX_IMAGE"

}
